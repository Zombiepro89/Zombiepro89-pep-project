package DAO;

// Our custom classes imported
import Model.Account;
import Util.ConnectionUtil;

// External libraries imported
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class AccountDAO {
    /**
     * Attempts to register an account.
     * 
     * An account cannot be registered if the username is blank 
     * or the password is less than 4 characters long.
     * 
     * @param newAccount Details for the newly created account
     * @return Newly created account with the account_id assigned by the database, otherwise null if couldn't be registered
     */
    public Account registerUser(Account newAccount){

        String username = newAccount.getUsername();
        String password = newAccount.getPassword();

        /* These conditions must be met for an account to be valid
            If they are not, simply return null*/
        if(username.length() <= 0 || password.length() < 4){
            return null;
        }

        try(Connection connection = ConnectionUtil.getConnection()){
            // Ready and execute query
            String sql = "INSERT INTO Account (username, password) VALUES (?, ?)";
            PreparedStatement query = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            query.setString(1, username);
            query.setString(2, password);
            query.executeUpdate();

            // If the account was added, get the account_id generated by the database and return
            ResultSet newAccountID = query.getGeneratedKeys();
            if(newAccountID.next()){
                newAccount.setAccount_id(newAccountID.getInt("account_id"));

                return newAccount;
            }
        }
        catch(SQLException e){
            System.out.println(e.getMessage());
        }

        // Account could not be registered
        return null;
    }

    /**
     * Attempts to login a user with the details provided
     * 
     * @param accountDetails Provided login details
     * @return The Account if details are valid, null otherwise
     */
    public Account loginUser(Account accountDetails){
        try (Connection connection = ConnectionUtil.getConnection()){
            // Ready and execute query
            String sql = "SELECT * FROM Account WHERE username = ? AND password = ?";
            PreparedStatement query = connection.prepareStatement(sql);
            query.setString(1, accountDetails.getUsername());
            query.setString(2, accountDetails.getPassword());
            ResultSet account = query.executeQuery();

            if(account.next()){
                // Account was successfully registered, get account_id and return
                accountDetails.setAccount_id(account.getInt("account_id"));
                return accountDetails;
            }
        } 
        catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        
        // Account details were not valid
        return null;
    }
}
